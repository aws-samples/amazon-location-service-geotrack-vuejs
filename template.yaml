AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
    "GeoTrack Application v2\n"
Globals:
  Function:
    AutoPublishAlias: live
    Handler: index.handler
    MemorySize: 256
    Runtime: python3.10
    Timeout: 120
    Tracing: Active    
  
Parameters:
  ProjectName:
    Type: String
    Default: geotrack
    Description: A description to identify project
  EnvironmentName:
    Type: String
    Default: dev
    Description: A description to identify environment (e.g. dev, prod)

Resources:
  CognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Sub ${ProjectName}-${EnvironmentName}-userpool
      Policies:
        PasswordPolicy: 
          MinimumLength: 8
      UsernameAttributes:
        - email
      AutoVerifiedAttributes:
        - email
      Schema:
        - AttributeDataType: String
          Name: email
          Required: true
        - AttributeDataType: String
          Name: family_name
          Required: true
        - AttributeDataType: String
          Name: given_name
          Required: true

  CognitoUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref CognitoUserPool
      ClientName: !Sub ${ProjectName}-${EnvironmentName}-client
      GenerateSecret: false

  UserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties: 
      Domain: !Join ['-', ['geotrack', !Select [1, !Split ['-', !Select [2, !Split ['/', !Ref AWS::StackId]]]]]]
      UserPoolId: !Ref CognitoUserPool

  CognitoIdentityPool:
    Type: AWS::Cognito::IdentityPool
    Properties:
      IdentityPoolName: !Sub ${ProjectName}-${EnvironmentName}-identity
      AllowUnauthenticatedIdentities: false
      CognitoIdentityProviders: 
        - ClientId: !Ref CognitoUserPoolClient
          ProviderName: !GetAtt CognitoUserPool.ProviderName
      
  # Create a role for unauthorized acces to AWS resources. Very limited access. Only allows users in the previously created Identity Pool
  CognitoUnAuthorizedRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal: 
              Federated: "cognito-identity.amazonaws.com"
            Action: 
              - "sts:AssumeRoleWithWebIdentity"
            Condition:
              StringEquals:
                'cognito-identity.amazonaws.com:aud':
                  Ref: CognitoIdentityPool
              'ForAnyValue:StringLike':
                'cognito-identity.amazonaws.com:amr': unauthenticated

  # Create a role for authorized acces to AWS resources. Control what your user can access. This example only allows Lambda invokation
  # Only allows users in the previously created Identity Pool
  CognitoAuthorizedRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal: 
              Federated: "cognito-identity.amazonaws.com"
            Action: 
              - "sts:AssumeRoleWithWebIdentity"
            Condition:
              StringEquals:
                'cognito-identity.amazonaws.com:aud':
                  Ref: CognitoIdentityPool
              'ForAnyValue:StringLike':
                'cognito-identity.amazonaws.com:amr': authenticated
  
  # Assigns the roles to the Identity Pool
  IdentityPoolRoleMapping:
    Type: AWS::Cognito::IdentityPoolRoleAttachment
    Properties:
      IdentityPoolId: !Ref CognitoIdentityPool
      Roles:
        authenticated: !GetAtt CognitoAuthorizedRole.Arn
        unauthenticated: !GetAtt CognitoUnAuthorizedRole.Arn

  DynamoDBTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      TableName: !Sub ${ProjectName}-${EnvironmentName}-table

  GraphQLAPI:
    Type: AWS::Serverless::GraphQLApi
    Properties:
      Name: !Sub ${ProjectName}-${EnvironmentName}-graphql
      SchemaUri: ./schema.graphql
      Auth:
        Type: "AMAZON_COGNITO_USER_POOLS"
        UserPool:
          UserPoolId: !Ref CognitoUserPool
          AwsRegion: !Ref "AWS::Region"
          DefaultAction: DENY
      DataSources:
        DynamoDb:
          PostsDataSource:
            TableName: !Ref DynamoDBTable
            TableArn: !GetAtt DynamoDBTable.Arn

  ApiGw:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub ${ProjectName}-${EnvironmentName}-api
      StageName: v1
      Cors:
        AllowOrigin: "'*'"
        AllowHeaders: "'*'"
        AllowMethods: "'OPTIONS,POST,GET,PUT,DELETE'"
      Auth:
        DefaultAuthorizer: TokenAuthorizer
        Authorizers:
          TokenAuthorizer:
            UserPoolArn: !GetAtt CognitoUserPool.Arn
        AddDefaultAuthorizerToCorsPreflight: False

  S3WebAppBucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      AccessControl: Private
      BucketEncryption:
        ServerSideEncryptionConfiguration: 
          - ServerSideEncryptionByDefault: 
              SSEAlgorithm: AES256
    DeletionPolicy: Delete

  S3WebAppBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref S3WebAppBucket      
      PolicyDocument:
        Statement:
        - Action: s3:GetObject
          Effect: Allow
          Resource: !Sub ${S3WebAppBucket.Arn}/*
          Principal:
            Service: cloudfront.amazonaws.com
          Condition:
            StringEquals:
              AWS:SourceArn: !Sub arn:aws:cloudfront::${AWS::AccountId}:distribution/${CloudFront}

  OriginAccessControl:
    Type: AWS::CloudFront::OriginAccessControl
    Properties: 
      OriginAccessControlConfig:
        Name: !Sub ${ProjectName}-${EnvironmentName}-OAC
        Description: Default Origin Access Control
        OriginAccessControlOriginType: s3
        SigningBehavior: always
        SigningProtocol: sigv4
        
  CloudFront:
    Type: AWS::CloudFront::Distribution
    Properties: 
      DistributionConfig:
        Origins:
        - Id: S3Origin
          DomainName: !GetAtt S3WebAppBucket.DomainName
          S3OriginConfig:
            OriginAccessIdentity: ''
          OriginAccessControlId: !GetAtt OriginAccessControl.Id
        Enabled: true
        DefaultRootObject: index.html
        DefaultCacheBehavior:
            ViewerProtocolPolicy: redirect-to-https
            AllowedMethods:
            - GET
            - HEAD
            - OPTIONS
            CachedMethods:
            - GET
            - HEAD
            - OPTIONS
            TargetOriginId: S3Origin
            ForwardedValues:
              QueryString: 'false'
              Cookies:
                Forward: none

  CoreLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      Description: requests
      ContentUri: ./layers/requests
      CompatibleRuntimes:
        - python3.10
      RetentionPolicy: Delete
    Metadata:
      BuildMethod: python3.10

  LaunchDeliveryFleet:
    Type: AWS::Serverless::Function 
    Properties:
      FunctionName: !Sub "${ProjectName}-${EnvironmentName}-LaunchDeliveryFleet"
      CodeUri: ./lambdas/simulation/launchDeliveryFleet  
      Layers:
        - !Ref CoreLayer
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGw
            Path: /launch
            Method: POST
      Policies:
        - arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess
        - SSMParameterReadPolicy:
            ParameterName: !Sub "amplify/${ProjectName}*"
        - LambdaInvokePolicy:
            FunctionName: !Ref PushVehiclePosition
        - Version: '2012-10-17' # Policy Document
          Statement:
            - Effect: Allow
              Action:
                - "appsync:GraphQL"
                - "appsync:GetGraphqlApi"
                - "appsync:ListGraphqlApis"
                - "appsync:ListApiKeys"
              Resource: '*'
      Environment:
        Variables:
          PUSH_VEHICLE_LAMBDA_NAME: !Ref PushVehiclePosition
          PROJECT_NAME: !Ref ProjectName
          PROJECT_ENV: !Ref EnvironmentName
          APPSYNC_URL: !GetAtt GraphQLAPI.GraphQLUrl

  PushVehiclePosition:
    Type: AWS::Serverless::Function 
    Properties:
      FunctionName: !Sub "${ProjectName}-${EnvironmentName}-PushVehiclePosition"
      CodeUri: ./lambdas/simulation/pushVehiclePosition
      Timeout: 600
      Policies:
        - arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess
        - SSMParameterReadPolicy:
            ParameterName: !Sub "amplify/${ProjectName}*"
        - Version: '2012-10-17' # Policy Document
          Statement:
            - Effect: Allow
              Action:
                - "iot:Connect"
                - "iot:Publish"
                - "iot:Subscribe"
                - "iot:Receive"
                - "iot:GetThingShadow"
                - "iot:UpdateThingShadow"
                - "iot:DeleteThingShadow"
                - "iot:ListNamedShadowsForThing"
                - "geo:CalculateRoute"               
                - "geo:ListRouteCalculators"
              Resource: '*'
      Environment:
        Variables:
          IOT_TOPIC: !Sub "${ProjectName}/positions"
          PROJECT_NAME: !Ref ProjectName
          PROJECT_ENV: !Ref EnvironmentName

  PinpointProject:
    Type: AWS::Pinpoint::App
    Properties: 
      Name: !Sub "${ProjectName}-${EnvironmentName}-PinPoint"
  PinpointSMSChannel:
    Type: AWS::Pinpoint::SMSChannel
    Properties: 
      ApplicationId: !Ref PinpointProject
      Enabled: true

  EventBus: 
    Type: AWS::Events::EventBus
    Properties: 
      Name: !Sub "${ProjectName}-${EnvironmentName}-EventBus"

  EventBridgeResponse:
    Type: AWS::Serverless::Function 
    Properties:
      FunctionName: !Sub "${ProjectName}-${EnvironmentName}-EventBridgeResponse"
      CodeUri: ./lambdas/eventbridge
      Layers:
        - !Ref CoreLayer
      Policies:
        - arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess
        - PinpointEndpointAccessPolicy:
            PinpointApplicationId: !Ref PinpointProject
        - SSMParameterReadPolicy:
            ParameterName: !Sub "amplify/${ProjectName}*"
        - Version: '2012-10-17' # Policy Document
          Statement:
            - Effect: Allow
              Action:
                - "appsync:GraphQL"
                - "appsync:GetGraphqlApi"
                - "appsync:ListGraphqlApis"
                - "appsync:ListApiKeys"
              Resource: '*'  
      Environment:
        Variables:
          APPLICATION_ID: !Ref PinpointProject
          PROJECT_NAME: !Ref ProjectName
          PROJECT_ENV: !Ref EnvironmentName
          APPSYNC_URL: !GetAtt GraphQLAPI.GraphQLUrl


  GeoRule:
    Type: AWS::Events::Rule
    Properties:       
      Name: !Sub "${ProjectName}-${EnvironmentName}-EventRule"
      EventBusName: !Ref EventBus
      State: ENABLED
      EventPattern:
        source: 
          - "aws.geo"
        detail-type:
          - "Location Geofence Event"
        detail:
          EventType:
            - "ENTER"
      Targets: 
      - 
        Arn: 
          Fn::GetAtt: 
            - "EventBridgeResponse"
            - "Arn"
        Id: "geoTrackV1"

  PermissionForEventsToInvokeLambda: 
    Type: AWS::Lambda::Permission
    Properties: 
      FunctionName: !Ref "EventBridgeResponse"
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: 
        Fn::GetAtt: 
          - "GeoRule"
          - "Arn"
      

  IoTUpdateTracker:
    Type: AWS::Serverless::Function 
    Properties:
      FunctionName: !Sub "${ProjectName}-${EnvironmentName}-IoTUpdateTracker"
      CodeUri: ./lambdas/iot
      Events:
        EventBusRule:
          Type: IoTRule
          Properties:
            Sql: !Sub "SELECT * FROM '${ProjectName}/positions'"
      Policies:
        - arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess
        - SSMParameterReadPolicy:
            ParameterName: !Sub "amplify/${ProjectName}*"
        - Version: '2012-10-17' # Policy Document
          Statement:
            - Effect: Allow
              Action:                
                - "geo:ListTrackers"
                - "geo:ListTrackerConsumers"
                - "geo:BatchUpdateDevicePosition"                
                - "geo:BatchGetDevicePosition"                
                - "geo:GetDevicePositionHistory"
                - "geo:DescribeTracker"                
                - "geo:UpdateTracker"
              Resource: "*"
      Environment:
        Variables:
          PROJECT_NAME: !Ref ProjectName
          PROJECT_ENV: !Ref EnvironmentName

Outputs:
  LaunchDeliveryFleet:
      Value: !GetAtt LaunchDeliveryFleet.Arn
  PushVehiclePosition:
      Value: !GetAtt PushVehiclePosition.Arn
