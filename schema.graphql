type Coordinate {
	lat: Float
	lng: Float
}

input CoordinateInput {
	lat: Float!
	lng: Float!
}

type DeliveryAgent {
	id: ID!
	fullName: String!
	deliveryType: String!
	deviceID: String!
	deviceType: String
	createdAt: AWSTimestamp
	updatedAt: AWSTimestamp
}

type DeliveryInfo {
	id: ID
	agentId: String
	geoStart: Coordinate
	geoEnd: Coordinate
	duration: Float
	distance: Float
	geoFenceId: ID
	userPhone: String
	expireDate: Int
	status: String
	createdAt: AWSTimestamp
	updatedAt: AWSTimestamp
}

input DeliveryInfoInput {
	id: ID!
	agentId: String!
	geoStart: CoordinateInput
	geoEnd: CoordinateInput
	duration: Float!
	distance: Float!
	geoFenceId: ID
	userPhone: String
	expireDate: Int
	status: String
	createdAt: AWSTimestamp
	updatedAt: AWSTimestamp
}

input DeliveryAgentInput {
  id: ID!
	fullName: String!
	deliveryType: String!
	deviceID: String!
	deviceType: String
	createdAt: AWSTimestamp
	updatedAt: AWSTimestamp
}

type Mutation {
	addDeliveryAgent(input: DeliveryAgentInput): DeliveryAgent
	addDeliveryInfo(input: DeliveryInfoInput): DeliveryInfo
}

type Query {
	getDeliveryAgent(id: ID!): DeliveryAgent
	getDeliveryInfo(id: ID!): DeliveryInfo
	listDeliveryAgents: [DeliveryAgent]
	listDeliveryInfos: [DeliveryInfo]
}

schema {
	query: Query
	mutation: Mutation
}